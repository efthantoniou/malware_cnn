import tensorflow as tf
import pathlib
import numpy as np
import sys
from tensorflow.keras import layers


print(tf.__version__)
tf.compat.v1.enable_eager_execution()
#tf.config.optimizer.set_jit(True)
normalization_layer = tf.keras.layers.experimental.preprocessing.Rescaling(1./255)

IMG_HEIGHT = IMG_WIDTH = 256
AUTOTUNE = tf.data.experimental.AUTOTUNE

data_dir = "E:\\classes_malware\\"
data_dir = pathlib.Path(data_dir)

image_count = len(list(data_dir.glob('*/*.png')))

def configure_for_performance(ds):
    ds = ds.cache()
    ds = ds.prefetch(buffer_size=AUTOTUNE)

    return ds




if __name__ == '__main__':

    train_ds = tf.keras.preprocessing.image_dataset_from_directory(
        data_dir,
        validation_split=0.3,
        subset="training",
        seed=123456,
        image_size=(IMG_HEIGHT, IMG_WIDTH),
        batch_size=32)

    val_ds = tf.keras.preprocessing.image_dataset_from_directory(
        data_dir,
        validation_split=0.3,
        subset="validation",
        seed=123456,
        image_size=(IMG_HEIGHT, IMG_WIDTH),
        batch_size=32)

    class_names = train_ds.class_names

    train_ds = train_ds.map(lambda x, y: (normalization_layer(x), y))
    val_ds = val_ds.map(lambda x, y: (normalization_layer(x), y))

    train_ds = configure_for_performance(train_ds)
    val_ds = configure_for_performance(val_ds)

    model = tf.keras. Sequential([
        layers.Conv2D(32, (3, 3), activation='relu', input_shape=(256, 256, 3)),
        layers.MaxPooling2D((2,2)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2,2)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2,2)),
        layers.Flatten(),
        layers.Dense(64, activation='relu'),
        layers.Dense(len(class_names), activation='softmax')
    ])

    model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False), optimizer='adam', metrics=['accuracy'])

    model.fit(train_ds, epochs=3, validation_data=val_ds)
